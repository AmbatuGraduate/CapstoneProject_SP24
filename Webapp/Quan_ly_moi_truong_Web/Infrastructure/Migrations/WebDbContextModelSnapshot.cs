// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(WebDbContext))]
    partial class WebDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BucketTruck.BucketTrucks", b =>
                {
                    b.Property<Guid>("BucketTruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BucketTruckLicensePlates")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("CraneArmLength")
                        .HasColumnType("real");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BucketTruckId");

                    b.ToTable("Bucket Trucks", (string)null);

                    b.HasData(
                        new
                        {
                            BucketTruckId = new Guid("f9257e9f-6d30-45fd-8afc-3e3266d7adc6"),
                            BucketTruckLicensePlates = "123123123Aa",
                            CraneArmLength = 12f,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 341, DateTimeKind.Local).AddTicks(3892),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 341, DateTimeKind.Local).AddTicks(3895)
                        },
                        new
                        {
                            BucketTruckId = new Guid("f9257e9f-6d31-45fd-8afc-3e3266d7adc6"),
                            BucketTruckLicensePlates = "123123123Aa",
                            CraneArmLength = 12f,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 341, DateTimeKind.Local).AddTicks(4001),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 341, DateTimeKind.Local).AddTicks(4003)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cultivar.Cultivars", b =>
                {
                    b.Property<Guid>("CultivarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CultivarName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TreeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CultivarId");

                    b.HasIndex("TreeTypeId");

                    b.ToTable("Cultivars", (string)null);

                    b.HasData(
                        new
                        {
                            CultivarId = new Guid("136514ac-99a2-421a-80e1-5351d9a9c4af"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 342, DateTimeKind.Local).AddTicks(1082),
                            CultivarName = "Giong cay bang",
                            TreeTypeId = new Guid("ad98e780-ce3b-401b-a2ec-dd7ba8027642"),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 342, DateTimeKind.Local).AddTicks(1085)
                        },
                        new
                        {
                            CultivarId = new Guid("136514ac-99a2-221a-80e1-5351d9a9c4af"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 342, DateTimeKind.Local).AddTicks(1122),
                            CultivarName = "Giong cay phuong",
                            TreeTypeId = new Guid("ad98e780-ce3b-401b-a2ec-dd7ba8027642"),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 342, DateTimeKind.Local).AddTicks(1124)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Deparment.Departments", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("bc2f24de-2b9b-489a-a108-64a114d2b9be"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 343, DateTimeKind.Local).AddTicks(1626),
                            DepartmentName = "Quet don via he",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 343, DateTimeKind.Local).AddTicks(1630)
                        },
                        new
                        {
                            DepartmentId = new Guid("bc2f24de-2b9b-429a-a108-64a114d2b9be"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 343, DateTimeKind.Local).AddTicks(1695),
                            DepartmentName = "Thu gom rac",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 343, DateTimeKind.Local).AddTicks(1699)
                        },
                        new
                        {
                            DepartmentId = new Guid("bc2f24de-1b9b-489a-a108-64a114d2b9be"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 343, DateTimeKind.Local).AddTicks(1733),
                            DepartmentName = "Cat tia cay",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 343, DateTimeKind.Local).AddTicks(1736)
                        });
                });

            modelBuilder.Entity("Domain.Entities.District.Districts", b =>
                {
                    b.Property<Guid>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DistrictId");

                    b.ToTable("Districts", (string)null);

                    b.HasData(
                        new
                        {
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(60),
                            DistrictName = "Ngu Hanh Son",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(63)
                        },
                        new
                        {
                            DistrictId = new Guid("be7d62da-33ea-46b0-b294-bb109eca92fc"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(115),
                            DistrictName = "Thanh Khe",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(133)
                        },
                        new
                        {
                            DistrictId = new Guid("be7d62da-51ea-46b0-b294-bb109eca92fc"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(146),
                            DistrictName = "Hai Chau",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(157)
                        });
                });

            modelBuilder.Entity("Domain.Entities.GarbageDump.GarbageDumps", b =>
                {
                    b.Property<Guid>("GarbageDumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GarbageDumpName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GarbageDumpId");

                    b.HasIndex("StreetId");

                    b.ToTable("GarbageDumps", (string)null);

                    b.HasData(
                        new
                        {
                            GarbageDumpId = new Guid("be5d01ee-b15c-4ced-aa0c-165c47dac9f9"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(6941),
                            GarbageDumpName = "HL-HH-NHS_1",
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(6943)
                        },
                        new
                        {
                            GarbageDumpId = new Guid("be5d01ee-b15d-4ced-aa0c-165c47dac9f9"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(6975),
                            GarbageDumpName = "HL-HH-NHS_2",
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 344, DateTimeKind.Local).AddTicks(6977)
                        });
                });

            modelBuilder.Entity("Domain.Entities.GarbageTruck.GarbageTrucks", b =>
                {
                    b.Property<Guid>("GarbageTruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GarbageDumpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GarbageTruckLicensePlates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GarbageTruckTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("GarbageTruckWeight")
                        .HasColumnType("real");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GarbageTruckId");

                    b.HasIndex("GarbageDumpId");

                    b.HasIndex("GarbageTruckTypeId");

                    b.ToTable("GarbageTrucks", (string)null);

                    b.HasData(
                        new
                        {
                            GarbageTruckId = new Guid("fc34e805-4550-4037-a273-17a0b1639bbe"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 345, DateTimeKind.Local).AddTicks(4136),
                            GarbageDumpId = new Guid("be5d01ee-b15c-4ced-aa0c-165c47dac9f9"),
                            GarbageTruckLicensePlates = "123123Aa",
                            GarbageTruckTypeId = new Guid("12e42a48-f991-4733-bd7c-2e536f931b22"),
                            GarbageTruckWeight = 450f,
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 345, DateTimeKind.Local).AddTicks(4138)
                        },
                        new
                        {
                            GarbageTruckId = new Guid("fc34e805-4550-4037-a273-17a0b1639bbc"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 345, DateTimeKind.Local).AddTicks(4173),
                            GarbageDumpId = new Guid("be5d01ee-b15c-4ced-aa0c-165c47dac9f9"),
                            GarbageTruckLicensePlates = "123456Aa",
                            GarbageTruckTypeId = new Guid("12e42a48-f991-4733-bd7c-2e536f931b22"),
                            GarbageTruckWeight = 450f,
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 345, DateTimeKind.Local).AddTicks(4175)
                        });
                });

            modelBuilder.Entity("Domain.Entities.GarbageTruckType.GarbageTruckTypes", b =>
                {
                    b.Property<Guid>("GarbageTruckTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GarbageTruckTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GarbageTruckTypeId");

                    b.ToTable("GarbageTruckTypes", (string)null);

                    b.HasData(
                        new
                        {
                            GarbageTruckTypeId = new Guid("12e42a48-f991-4733-bd7c-2e536f931b22"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 345, DateTimeKind.Local).AddTicks(9567),
                            GarbageTruckTypeName = "Xe thu gom rac nho",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 345, DateTimeKind.Local).AddTicks(9570)
                        },
                        new
                        {
                            GarbageTruckTypeId = new Guid("12e42a48-f991-4733-bd7c-2e536f921b22"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 345, DateTimeKind.Local).AddTicks(9614),
                            GarbageTruckTypeName = "Xe thu gom rac to",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 345, DateTimeKind.Local).AddTicks(9617)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ListGarbagemanTask.User_scheduleGarbageCollect_maps", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleGarbageCollectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ScheduleGarbageCollectId");

                    b.HasIndex("ScheduleGarbageCollectId");

                    b.ToTable("User_scheduleGarbageCollect_maps", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b2b1e0ce-0187-4285-8cce-60fdff665f46"),
                            ScheduleGarbageCollectId = new Guid("26397b2b-ca94-4af4-bf0d-f7aaa7510698"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 358, DateTimeKind.Local).AddTicks(5397),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 358, DateTimeKind.Local).AddTicks(5400)
                        },
                        new
                        {
                            UserId = new Guid("b2b1e0ce-0187-4285-8cce-60fdff666f46"),
                            ScheduleGarbageCollectId = new Guid("26397b2b-ca94-4af4-bf0d-f7aaa7510698"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 358, DateTimeKind.Local).AddTicks(5440),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 358, DateTimeKind.Local).AddTicks(5442)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ListSidewalkCleanerTask.User_scheduleCleanSidewalk_maps", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleCleanSidewalkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ScheduleCleanSidewalkId");

                    b.HasIndex("ScheduleCleanSidewalkId");

                    b.ToTable("User_scheduleCleanSidewalk_maps", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b2b1e0ce-0187-4285-8cce-60fdff665f46"),
                            ScheduleCleanSidewalkId = new Guid("7a866c85-b013-4fab-80c7-15d21d0c686c"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 357, DateTimeKind.Local).AddTicks(7137),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 357, DateTimeKind.Local).AddTicks(7140)
                        },
                        new
                        {
                            UserId = new Guid("b2b1e0ce-0187-4285-8cce-60fdff666f46"),
                            ScheduleCleanSidewalkId = new Guid("7a866c85-b013-4fab-80c7-15d21d0c686c"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 357, DateTimeKind.Local).AddTicks(7170),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 357, DateTimeKind.Local).AddTicks(7172)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ListTreeTrimmerTask.User_scheduleTreeTrim_maps", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleTreeTrimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ScheduleTreeTrimId");

                    b.HasIndex("ScheduleTreeTrimId");

                    b.ToTable("User_scheduleTreeTrim_maps", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b2b1e0ce-0187-4285-8cce-60fdff665f46"),
                            ScheduleTreeTrimId = new Guid("04dc28f5-94c4-4565-93a2-934d6fee53fd"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 359, DateTimeKind.Local).AddTicks(9359),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 359, DateTimeKind.Local).AddTicks(9364)
                        },
                        new
                        {
                            UserId = new Guid("b2b1e0ce-0187-4285-8cce-60fdff666f46"),
                            ScheduleTreeTrimId = new Guid("04dc28f5-94c4-4565-93a2-934d6fee53fd"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 359, DateTimeKind.Local).AddTicks(9422),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 359, DateTimeKind.Local).AddTicks(9425)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Report.Reports", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports", (string)null);

                    b.HasData(
                        new
                        {
                            ReportId = new Guid("6e4ba4c3-6edf-45ca-8b60-54caa256c725"),
                            Content = "Demo",
                            Image = "string",
                            Status = false,
                            Title = "DEMO",
                            UserId = new Guid("b2b1e0ce-0187-4285-8cce-60fdff665f46")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role.Roles", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("abccde85-c7dc-4f78-9e4e-b1b3e7abee84"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(186),
                            RoleName = "Manager",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(188)
                        },
                        new
                        {
                            RoleId = new Guid("cacd4b3a-8afe-43e9-b757-f57f5c61f8d8"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(220),
                            RoleName = "Leader",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(222)
                        },
                        new
                        {
                            RoleId = new Guid("8977ef77-e554-4ef3-8353-3e01161f84d0"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(232),
                            RoleName = "Employee",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(234)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ScheduleCleanSidewalk.ScheduleCleanSidewalks", b =>
                {
                    b.Property<Guid>("ScheduleCleanSidewalksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkingMonth")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleCleanSidewalksId");

                    b.ToTable("ScheduleCleanSidewalks", (string)null);

                    b.HasData(
                        new
                        {
                            ScheduleCleanSidewalksId = new Guid("7a866c85-b013-4fab-80c7-15d21d0c686c"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(7621),
                            StartTime = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(7618),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(7624),
                            WorkingMonth = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(7620)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ScheduleCleanSidewalk_street_map.ScheduleCleanSidewalk_street_maps", b =>
                {
                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleCleanSidewalksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StreetId", "ScheduleCleanSidewalksId");

                    b.HasIndex("ScheduleCleanSidewalksId");

                    b.ToTable("ScheduleCleanSidewalk_street_maps", (string)null);

                    b.HasData(
                        new
                        {
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            ScheduleCleanSidewalksId = new Guid("7a866c85-b013-4fab-80c7-15d21d0c686c"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(5942),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 347, DateTimeKind.Local).AddTicks(5944)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ScheduleGarbageCollect.ScheduleGarbageCollects", b =>
                {
                    b.Property<Guid>("ScheduleGarbageCollectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("GabageMass")
                        .HasColumnType("real");

                    b.Property<Guid>("GarbageTruckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkingMonth")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleGarbageCollectId");

                    b.HasIndex("GarbageTruckId");

                    b.ToTable("ScheduleGarbageCollects", (string)null);

                    b.HasData(
                        new
                        {
                            ScheduleGarbageCollectId = new Guid("26397b2b-ca94-4af4-bf0d-f7aaa7510698"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(249),
                            GabageMass = 10f,
                            GarbageTruckId = new Guid("fc34e805-4550-4037-a273-17a0b1639bbe"),
                            StartTime = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(239),
                            TransitTime = new DateTime(2024, 2, 6, 15, 50, 3, 349, DateTimeKind.Local).AddTicks(240),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(251),
                            WorkingMonth = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(248)
                        },
                        new
                        {
                            ScheduleGarbageCollectId = new Guid("e3c19a06-7f84-4c4d-8d83-71264a5cf176"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(290),
                            GabageMass = 10f,
                            GarbageTruckId = new Guid("fc34e805-4550-4037-a273-17a0b1639bbe"),
                            StartTime = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(285),
                            TransitTime = new DateTime(2024, 2, 6, 15, 50, 3, 349, DateTimeKind.Local).AddTicks(286),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(292),
                            WorkingMonth = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(288)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ScheduleGarbageCollect_street_map.ScheduleGarbageCollect_street_maps", b =>
                {
                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleGarbageCollectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StreetId", "ScheduleGarbageCollectId");

                    b.HasIndex("ScheduleGarbageCollectId");

                    b.ToTable("ScheduleGarbageCollect_street_maps", (string)null);

                    b.HasData(
                        new
                        {
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            ScheduleGarbageCollectId = new Guid("26397b2b-ca94-4af4-bf0d-f7aaa7510698"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 348, DateTimeKind.Local).AddTicks(3159),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 348, DateTimeKind.Local).AddTicks(3161)
                        },
                        new
                        {
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            ScheduleGarbageCollectId = new Guid("e3c19a06-7f84-4c4d-8d83-71264a5cf176"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 348, DateTimeKind.Local).AddTicks(3190),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 348, DateTimeKind.Local).AddTicks(3192)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ScheduleTreeTrim.ScheduleTreeTrims", b =>
                {
                    b.Property<Guid>("ScheduleTreeTrimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualTrimmingTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BucketTruckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedPruningTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleTreeTrimId");

                    b.HasIndex("BucketTruckId");

                    b.ToTable("ScheduleTreeTrims", (string)null);

                    b.HasData(
                        new
                        {
                            ScheduleTreeTrimId = new Guid("04dc28f5-94c4-4565-93a2-934d6fee53fd"),
                            ActualTrimmingTime = new DateTime(2024, 5, 7, 12, 50, 3, 350, DateTimeKind.Local).AddTicks(9481),
                            BucketTruckId = new Guid("f9257e9f-6d30-45fd-8afc-3e3266d7adc6"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 350, DateTimeKind.Local).AddTicks(9489),
                            EstimatedPruningTime = new DateTime(2024, 5, 6, 12, 50, 3, 350, DateTimeKind.Local).AddTicks(9470),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 350, DateTimeKind.Local).AddTicks(9491)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ScheduleTreeTrim_street_map.ScheduleTreeTrim_street_maps", b =>
                {
                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleTreeTrimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StreetId", "ScheduleTreeTrimId");

                    b.HasIndex("ScheduleTreeTrimId");

                    b.ToTable("ScheduleTreeTrim_street_maps", (string)null);

                    b.HasData(
                        new
                        {
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            ScheduleTreeTrimId = new Guid("04dc28f5-94c4-4565-93a2-934d6fee53fd"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(5880),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 349, DateTimeKind.Local).AddTicks(5884)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Street.Streets", b =>
                {
                    b.Property<Guid>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfHouses")
                        .HasColumnType("int");

                    b.Property<float>("StreetLength")
                        .HasColumnType("real");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("StreetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StreetId");

                    b.HasIndex("StreetTypeId");

                    b.HasIndex("WardId");

                    b.ToTable("Streets", (string)null);

                    b.HasData(
                        new
                        {
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 355, DateTimeKind.Local).AddTicks(95),
                            NumberOfHouses = 20,
                            StreetLength = 10000f,
                            StreetName = "Duong Huynh Lam",
                            StreetTypeId = new Guid("1be73957-b7e9-4304-9242-00e8b92a86f0"),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 355, DateTimeKind.Local).AddTicks(98),
                            WardId = new Guid("996c63bc-5f0a-44f6-8c9a-aad741b3beac")
                        });
                });

            modelBuilder.Entity("Domain.Entities.StreetType.StreetTypes", b =>
                {
                    b.Property<Guid>("StreetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StreetTypeId");

                    b.ToTable("StreetTypes", (string)null);

                    b.HasData(
                        new
                        {
                            StreetTypeId = new Guid("1be73957-b7e9-4304-9242-00e8b92a86f0"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 355, DateTimeKind.Local).AddTicks(8804),
                            StreetTypeName = "Duong Kinh Doanh",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 355, DateTimeKind.Local).AddTicks(8807)
                        },
                        new
                        {
                            StreetTypeId = new Guid("e3d44b7e-8ebe-434f-88ef-054a81951be1"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 355, DateTimeKind.Local).AddTicks(9098),
                            StreetTypeName = "Duong Dan Sinh",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 355, DateTimeKind.Local).AddTicks(9100)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tree.Trees", b =>
                {
                    b.Property<Guid>("TreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("BodyDiameter")
                        .HasColumnType("real");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CultivarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IntervalCutTime")
                        .HasColumnType("int");

                    b.Property<float>("LeafLength")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("PlantTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TreeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isExist")
                        .HasColumnType("bit");

                    b.HasKey("TreeId");

                    b.HasIndex("CultivarId");

                    b.HasIndex("StreetId");

                    b.ToTable("Trees", (string)null);

                    b.HasData(
                        new
                        {
                            TreeId = new Guid("24b2ee45-d7c3-4cc7-9fac-406b4bac1d82"),
                            BodyDiameter = 30f,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 356, DateTimeKind.Local).AddTicks(4839),
                            CultivarId = new Guid("136514ac-99a2-421a-80e1-5351d9a9c4af"),
                            CutTime = new DateTime(2024, 5, 6, 12, 50, 3, 356, DateTimeKind.Local).AddTicks(4825),
                            IntervalCutTime = 3,
                            LeafLength = 50f,
                            Note = "",
                            PlantTime = new DateTime(2024, 2, 6, 12, 50, 3, 356, DateTimeKind.Local).AddTicks(4824),
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            TreeCode = "12_HL_HH_NHS",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 356, DateTimeKind.Local).AddTicks(4841),
                            isExist = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.TreeType.TreeTypes", b =>
                {
                    b.Property<Guid>("TreeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TreeTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TreeTypeId");

                    b.ToTable("TreeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            TreeTypeId = new Guid("ad98e780-ce3b-401b-a2ec-dd7ba8027642"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 2, 6, 12, 50, 3, 357, DateTimeKind.Local).AddTicks(1022),
                            TreeTypeName = "Cay than go",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 2, 6, 12, 50, 3, 357, DateTimeKind.Local).AddTicks(1024)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("56b77536-6c85-4e7d-910b-964e906c7cf2"),
                            AccessFailedCount = 0,
                            Address = "Admin",
                            ConcurrencyStamp = "8de20835-0da0-4f3f-bf2b-11413c6506a4",
                            DepartmentId = new Guid("bc2f24de-2b9b-489a-a108-64a114d2b9be"),
                            EmailConfirmed = false,
                            Image = "string",
                            LockoutEnabled = false,
                            Name = "Admin",
                            Password = "123123Aa!",
                            PhoneNumber = "0947346127",
                            PhoneNumberConfirmed = false,
                            RoleId = new Guid("abccde85-c7dc-4f78-9e4e-b1b3e7abee84"),
                            TwoFactorEnabled = false,
                            UserCode = "admin"
                        },
                        new
                        {
                            Id = new Guid("b2b1e0ce-0187-4285-8cce-60fdff665f46"),
                            AccessFailedCount = 0,
                            Address = "30 Nam Ky Khoi Nghia",
                            ConcurrencyStamp = "c5235e50-aff9-4851-ae69-4bc3cd82d34b",
                            DepartmentId = new Guid("bc2f24de-2b9b-489a-a108-64a114d2b9be"),
                            EmailConfirmed = false,
                            Image = "string",
                            LockoutEnabled = false,
                            Name = "Nguyen Van A",
                            Password = "123123Aa!",
                            PhoneNumber = "0947123244",
                            PhoneNumberConfirmed = false,
                            RoleId = new Guid("8977ef77-e554-4ef3-8353-3e01161f84d0"),
                            TwoFactorEnabled = false,
                            UserCode = "NHS_HH_NKKN_123"
                        },
                        new
                        {
                            Id = new Guid("b2b1e0ce-0187-4285-8cce-60fdff666f46"),
                            AccessFailedCount = 0,
                            Address = "45 Huynh Lam",
                            ConcurrencyStamp = "41bd0194-8a11-4b7e-a3d1-2aa09983aee0",
                            DepartmentId = new Guid("bc2f24de-2b9b-429a-a108-64a114d2b9be"),
                            EmailConfirmed = false,
                            Image = "string",
                            LockoutEnabled = false,
                            Name = "Nguyen Van B",
                            Password = "123123Aa!",
                            PhoneNumber = "0947133244",
                            PhoneNumberConfirmed = false,
                            RoleId = new Guid("8977ef77-e554-4ef3-8353-3e01161f84d0"),
                            TwoFactorEnabled = false,
                            UserCode = "NHS_HH_NKKN_456"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ward.Wards", b =>
                {
                    b.Property<Guid>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WardId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards", (string)null);

                    b.HasData(
                        new
                        {
                            WardId = new Guid("996c63bc-5f0a-44f6-8c9a-aad741b3beac"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Hoa Hai"
                        },
                        new
                        {
                            WardId = new Guid("faa64719-904b-4844-9ec9-d8f2620ffb51"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Khue My"
                        },
                        new
                        {
                            WardId = new Guid("79bea4b4-23ce-41ad-b585-4dfc835d607a"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Hoa Quy"
                        },
                        new
                        {
                            WardId = new Guid("38af1dbf-b83f-4899-8389-743021c463a0"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "My An"
                        },
                        new
                        {
                            WardId = new Guid("c088acde-18ea-48ca-ae03-bdd4e610e039"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Hai Chau I"
                        },
                        new
                        {
                            WardId = new Guid("3097108f-15fe-4ac8-aab4-187b56841c81"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Hai Chau II"
                        },
                        new
                        {
                            WardId = new Guid("f4e93702-9dc2-4288-8f23-4c3812ed50cc"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Thuan Phuoc"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cultivar.Cultivars", b =>
                {
                    b.HasOne("Domain.Entities.TreeType.TreeTypes", "TreeTypes")
                        .WithMany("Cultivars")
                        .HasForeignKey("TreeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeTypes");
                });

            modelBuilder.Entity("Domain.Entities.GarbageDump.GarbageDumps", b =>
                {
                    b.HasOne("Domain.Entities.Street.Streets", "Streets")
                        .WithMany("GarbageDumps")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Domain.Entities.GarbageTruck.GarbageTrucks", b =>
                {
                    b.HasOne("Domain.Entities.GarbageDump.GarbageDumps", "GarbageDumps")
                        .WithMany("GarbageTrucks")
                        .HasForeignKey("GarbageDumpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GarbageTruckType.GarbageTruckTypes", "GarbageTruckTypes")
                        .WithMany("GarbageTrucks")
                        .HasForeignKey("GarbageTruckTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GarbageDumps");

                    b.Navigation("GarbageTruckTypes");
                });

            modelBuilder.Entity("Domain.Entities.ListGarbagemanTask.User_scheduleGarbageCollect_maps", b =>
                {
                    b.HasOne("Domain.Entities.ScheduleGarbageCollect.ScheduleGarbageCollects", "ScheduleGarbageCollects")
                        .WithMany("User_scheduleGarbageCollect_maps")
                        .HasForeignKey("ScheduleGarbageCollectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.Users", "Users")
                        .WithMany("User_scheduleGarbageCollect_maps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleGarbageCollects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.ListSidewalkCleanerTask.User_scheduleCleanSidewalk_maps", b =>
                {
                    b.HasOne("Domain.Entities.ScheduleCleanSidewalk.ScheduleCleanSidewalks", "ScheduleCleanSidewalks")
                        .WithMany("User_scheduleCleanSidewalk_maps")
                        .HasForeignKey("ScheduleCleanSidewalkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.Users", "Users")
                        .WithMany("User_scheduleCleanSidewalk_maps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleCleanSidewalks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.ListTreeTrimmerTask.User_scheduleTreeTrim_maps", b =>
                {
                    b.HasOne("Domain.Entities.ScheduleTreeTrim.ScheduleTreeTrims", "ScheduleTreeTrims")
                        .WithMany("User_scheduleTreeTrim_maps")
                        .HasForeignKey("ScheduleTreeTrimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.Users", "Users")
                        .WithMany("User_scheduleTreeTrim_maps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleTreeTrims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Report.Reports", b =>
                {
                    b.HasOne("Domain.Entities.User.Users", "Users")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleCleanSidewalk_street_map.ScheduleCleanSidewalk_street_maps", b =>
                {
                    b.HasOne("Domain.Entities.ScheduleCleanSidewalk.ScheduleCleanSidewalks", "ScheduleCleanSidewalk")
                        .WithMany("ScheduleCleanSidewalk_street_maps")
                        .HasForeignKey("ScheduleCleanSidewalksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Street.Streets", "Street")
                        .WithMany("ScheduleCleanSidewalk_street_maps")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleCleanSidewalk");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleGarbageCollect.ScheduleGarbageCollects", b =>
                {
                    b.HasOne("Domain.Entities.GarbageTruck.GarbageTrucks", "GarbageTrucks")
                        .WithMany("ScheduleGarbageCollects")
                        .HasForeignKey("GarbageTruckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GarbageTrucks");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleGarbageCollect_street_map.ScheduleGarbageCollect_street_maps", b =>
                {
                    b.HasOne("Domain.Entities.ScheduleGarbageCollect.ScheduleGarbageCollects", "ScheduleGarbageCollect")
                        .WithMany("ScheduleGarbageCollect_street_maps")
                        .HasForeignKey("ScheduleGarbageCollectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Street.Streets", "Street")
                        .WithMany("ScheduleGarbageCollect_street_maps")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleGarbageCollect");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleTreeTrim.ScheduleTreeTrims", b =>
                {
                    b.HasOne("Domain.Entities.BucketTruck.BucketTrucks", "BucketTrucks")
                        .WithMany("ScheduleTreeTrims")
                        .HasForeignKey("BucketTruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BucketTrucks");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleTreeTrim_street_map.ScheduleTreeTrim_street_maps", b =>
                {
                    b.HasOne("Domain.Entities.ScheduleTreeTrim.ScheduleTreeTrims", "ScheduleTreeTrim")
                        .WithMany("ScheduleTreeTrim_street_maps")
                        .HasForeignKey("ScheduleTreeTrimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Street.Streets", "Street")
                        .WithMany("ScheduleTreeTrim_street_maps")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleTreeTrim");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Domain.Entities.Street.Streets", b =>
                {
                    b.HasOne("Domain.Entities.StreetType.StreetTypes", "StreetType")
                        .WithMany("Streets")
                        .HasForeignKey("StreetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Ward.Wards", "Wards")
                        .WithMany("Streets")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreetType");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("Domain.Entities.Tree.Trees", b =>
                {
                    b.HasOne("Domain.Entities.Cultivar.Cultivars", "Cultivar")
                        .WithMany("Trees")
                        .HasForeignKey("CultivarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Street.Streets", "Streets")
                        .WithMany("Trees")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivar");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Domain.Entities.User.Users", b =>
                {
                    b.HasOne("Domain.Entities.Deparment.Departments", "Departments")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Ward.Wards", b =>
                {
                    b.HasOne("Domain.Entities.District.Districts", "Districts")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Entities.BucketTruck.BucketTrucks", b =>
                {
                    b.Navigation("ScheduleTreeTrims");
                });

            modelBuilder.Entity("Domain.Entities.Cultivar.Cultivars", b =>
                {
                    b.Navigation("Trees");
                });

            modelBuilder.Entity("Domain.Entities.Deparment.Departments", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.District.Districts", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("Domain.Entities.GarbageDump.GarbageDumps", b =>
                {
                    b.Navigation("GarbageTrucks");
                });

            modelBuilder.Entity("Domain.Entities.GarbageTruck.GarbageTrucks", b =>
                {
                    b.Navigation("ScheduleGarbageCollects");
                });

            modelBuilder.Entity("Domain.Entities.GarbageTruckType.GarbageTruckTypes", b =>
                {
                    b.Navigation("GarbageTrucks");
                });

            modelBuilder.Entity("Domain.Entities.Role.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleCleanSidewalk.ScheduleCleanSidewalks", b =>
                {
                    b.Navigation("ScheduleCleanSidewalk_street_maps");

                    b.Navigation("User_scheduleCleanSidewalk_maps");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleGarbageCollect.ScheduleGarbageCollects", b =>
                {
                    b.Navigation("ScheduleGarbageCollect_street_maps");

                    b.Navigation("User_scheduleGarbageCollect_maps");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleTreeTrim.ScheduleTreeTrims", b =>
                {
                    b.Navigation("ScheduleTreeTrim_street_maps");

                    b.Navigation("User_scheduleTreeTrim_maps");
                });

            modelBuilder.Entity("Domain.Entities.Street.Streets", b =>
                {
                    b.Navigation("GarbageDumps");

                    b.Navigation("ScheduleCleanSidewalk_street_maps");

                    b.Navigation("ScheduleGarbageCollect_street_maps");

                    b.Navigation("ScheduleTreeTrim_street_maps");

                    b.Navigation("Trees");
                });

            modelBuilder.Entity("Domain.Entities.StreetType.StreetTypes", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Domain.Entities.TreeType.TreeTypes", b =>
                {
                    b.Navigation("Cultivars");
                });

            modelBuilder.Entity("Domain.Entities.User.Users", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("User_scheduleCleanSidewalk_maps");

                    b.Navigation("User_scheduleGarbageCollect_maps");

                    b.Navigation("User_scheduleTreeTrim_maps");
                });

            modelBuilder.Entity("Domain.Entities.Ward.Wards", b =>
                {
                    b.Navigation("Streets");
                });
#pragma warning restore 612, 618
        }
    }
}
