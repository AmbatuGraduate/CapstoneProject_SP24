// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(WebDbContext))]
    [Migration("20240320073112_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Cultivar.Cultivars", b =>
                {
                    b.Property<Guid>("CultivarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CultivarName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TreeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CultivarId");

                    b.HasIndex("TreeTypeId");

                    b.ToTable("Cultivars", (string)null);

                    b.HasData(
                        new
                        {
                            CultivarId = new Guid("136514ac-99a2-421a-80e1-5351d9a9c4af"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 746, DateTimeKind.Local).AddTicks(5834),
                            CultivarName = "Giong cay bang",
                            TreeTypeId = new Guid("ad98e780-ce3b-401b-a2ec-dd7ba8027642"),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 746, DateTimeKind.Local).AddTicks(5835)
                        },
                        new
                        {
                            CultivarId = new Guid("136514ac-99a2-221a-80e1-5351d9a9c4af"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 746, DateTimeKind.Local).AddTicks(5858),
                            CultivarName = "Giong cay phuong",
                            TreeTypeId = new Guid("ad98e780-ce3b-401b-a2ec-dd7ba8027642"),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 746, DateTimeKind.Local).AddTicks(5859)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Deparment.Departments", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AdminCreated")
                        .HasColumnType("bit");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DirectMembersCount")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            DepartmentId = "01egqt2p26jkcil",
                            AdminCreated = true,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 746, DateTimeKind.Local).AddTicks(8181),
                            DepartmentEmail = "dev@gmail.com",
                            DepartmentName = "Quan ly cay xanh",
                            Description = "string",
                            DirectMembersCount = 3L,
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 746, DateTimeKind.Local).AddTicks(8182)
                        });
                });

            modelBuilder.Entity("Domain.Entities.District.Districts", b =>
                {
                    b.Property<Guid>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DistrictId");

                    b.ToTable("Districts", (string)null);

                    b.HasData(
                        new
                        {
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(355),
                            DistrictName = "Ngu Hanh Son",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(356)
                        },
                        new
                        {
                            DistrictId = new Guid("be7d62da-33ea-46b0-b294-bb109eca92fc"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(370),
                            DistrictName = "Thanh Khe",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(370)
                        },
                        new
                        {
                            DistrictId = new Guid("be7d62da-51ea-46b0-b294-bb109eca92fc"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(375),
                            DistrictName = "Hai Chau",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(375)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Report.Reports", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IssuerGmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ResidentialGroup.ResidentialGroups", b =>
                {
                    b.Property<Guid>("ResidentialGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResidentialGroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResidentialGroupId");

                    b.HasIndex("WardId");

                    b.ToTable("ResidentialGroups", (string)null);

                    b.HasData(
                        new
                        {
                            ResidentialGroupId = new Guid("0a0e931d-d055-48a9-b8a4-2cf57ac2f6f5"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(3530),
                            ResidentialGroupName = "Dong Tra",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(3531),
                            WardId = new Guid("996c63bc-5f0a-44f6-8c9a-aad741b3beac")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role.Roles", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("abccde85-c7dc-4f78-9e4e-b1b3e7abee84"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(5588),
                            RoleName = "Manager",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(5589)
                        },
                        new
                        {
                            RoleId = new Guid("cacd4b3a-8afe-43e9-b757-f57f5c61f8d8"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(5603),
                            RoleName = "Leader",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(5604)
                        },
                        new
                        {
                            RoleId = new Guid("8977ef77-e554-4ef3-8353-3e01161f84d0"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(5608),
                            RoleName = "Employee",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(5608)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Street.Streets", b =>
                {
                    b.Property<Guid>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfHouses")
                        .HasColumnType("int");

                    b.Property<Guid>("ResidentialGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("StreetLength")
                        .HasColumnType("real");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("StreetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StreetId");

                    b.HasIndex("ResidentialGroupId");

                    b.HasIndex("StreetTypeId");

                    b.ToTable("Streets", (string)null);

                    b.HasData(
                        new
                        {
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(8136),
                            NumberOfHouses = 20,
                            ResidentialGroupId = new Guid("0a0e931d-d055-48a9-b8a4-2cf57ac2f6f5"),
                            StreetLength = 10000f,
                            StreetName = "Duong Huynh Lam",
                            StreetTypeId = new Guid("1be73957-b7e9-4304-9242-00e8b92a86f0"),
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(8137)
                        });
                });

            modelBuilder.Entity("Domain.Entities.StreetType.StreetTypes", b =>
                {
                    b.Property<Guid>("StreetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StreetTypeId");

                    b.ToTable("StreetTypes", (string)null);

                    b.HasData(
                        new
                        {
                            StreetTypeId = new Guid("1be73957-b7e9-4304-9242-00e8b92a86f0"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(9922),
                            StreetTypeName = "Duong Kinh Doanh",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(9923)
                        },
                        new
                        {
                            StreetTypeId = new Guid("e3d44b7e-8ebe-434f-88ef-054a81951be1"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(9941),
                            StreetTypeName = "Duong Dan Sinh",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 747, DateTimeKind.Local).AddTicks(9942)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tree.Trees", b =>
                {
                    b.Property<Guid>("TreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("BodyDiameter")
                        .HasColumnType("real");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CultivarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IntervalCutTime")
                        .HasColumnType("int");

                    b.Property<float>("LeafLength")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("PlantTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TreeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isCut")
                        .HasColumnType("bit");

                    b.Property<bool>("isExist")
                        .HasColumnType("bit");

                    b.HasKey("TreeId");

                    b.HasIndex("CultivarId");

                    b.HasIndex("StreetId");

                    b.ToTable("Trees", (string)null);

                    b.HasData(
                        new
                        {
                            TreeId = new Guid("24b2ee45-d7c3-4cc7-9fac-406b4bac1d82"),
                            BodyDiameter = 30f,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 748, DateTimeKind.Local).AddTicks(1621),
                            CultivarId = new Guid("136514ac-99a2-421a-80e1-5351d9a9c4af"),
                            CutTime = new DateTime(2024, 6, 20, 14, 31, 11, 748, DateTimeKind.Local).AddTicks(1596),
                            IntervalCutTime = 3,
                            LeafLength = 50f,
                            Note = "",
                            PlantTime = new DateTime(2024, 3, 20, 14, 31, 11, 748, DateTimeKind.Local).AddTicks(1595),
                            StreetId = new Guid("0c0187dc-c7e2-4aa9-ae35-a5e2d60dfa24"),
                            TreeCode = "12_HL_HH_NHS",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 748, DateTimeKind.Local).AddTicks(1622),
                            isCut = true,
                            isExist = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.TreeType.TreeTypes", b =>
                {
                    b.Property<Guid>("TreeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TreeTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TreeTypeId");

                    b.ToTable("TreeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            TreeTypeId = new Guid("ad98e780-ce3b-401b-a2ec-dd7ba8027642"),
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2024, 3, 20, 14, 31, 11, 748, DateTimeKind.Local).AddTicks(3633),
                            TreeTypeName = "Cay than go",
                            UpdateBy = "Admin",
                            UpdateDate = new DateTime(2024, 3, 20, 14, 31, 11, 748, DateTimeKind.Local).AddTicks(3634)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken.UserRefreshTokens", b =>
                {
                    b.Property<Guid>("UserRefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Expire")
                        .HasColumnType("bigint");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserRefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ward.Wards", b =>
                {
                    b.Property<Guid>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WardId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards", (string)null);

                    b.HasData(
                        new
                        {
                            WardId = new Guid("996c63bc-5f0a-44f6-8c9a-aad741b3beac"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Hoa Hai"
                        },
                        new
                        {
                            WardId = new Guid("faa64719-904b-4844-9ec9-d8f2620ffb51"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Khue My"
                        },
                        new
                        {
                            WardId = new Guid("79bea4b4-23ce-41ad-b585-4dfc835d607a"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Hoa Quy"
                        },
                        new
                        {
                            WardId = new Guid("38af1dbf-b83f-4899-8389-743021c463a0"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "My An"
                        },
                        new
                        {
                            WardId = new Guid("c088acde-18ea-48ca-ae03-bdd4e610e039"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Hai Chau I"
                        },
                        new
                        {
                            WardId = new Guid("3097108f-15fe-4ac8-aab4-187b56841c81"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Hai Chau II"
                        },
                        new
                        {
                            WardId = new Guid("f4e93702-9dc2-4288-8f23-4c3812ed50cc"),
                            DistrictId = new Guid("be7d62da-53ea-46b0-b294-bb109eca92fc"),
                            WardName = "Thuan Phuoc"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cultivar.Cultivars", b =>
                {
                    b.HasOne("Domain.Entities.TreeType.TreeTypes", "TreeTypes")
                        .WithMany("Cultivars")
                        .HasForeignKey("TreeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeTypes");
                });

            modelBuilder.Entity("Domain.Entities.ResidentialGroup.ResidentialGroups", b =>
                {
                    b.HasOne("Domain.Entities.Ward.Wards", "Ward")
                        .WithMany("ResidentialGroups")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Domain.Entities.Street.Streets", b =>
                {
                    b.HasOne("Domain.Entities.ResidentialGroup.ResidentialGroups", "ResidentialGroup")
                        .WithMany("Streets")
                        .HasForeignKey("ResidentialGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StreetType.StreetTypes", "StreetType")
                        .WithMany("Streets")
                        .HasForeignKey("StreetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidentialGroup");

                    b.Navigation("StreetType");
                });

            modelBuilder.Entity("Domain.Entities.Tree.Trees", b =>
                {
                    b.HasOne("Domain.Entities.Cultivar.Cultivars", "Cultivar")
                        .WithMany("Trees")
                        .HasForeignKey("CultivarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Street.Streets", "Streets")
                        .WithMany("Trees")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivar");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Domain.Entities.User.Users", b =>
                {
                    b.HasOne("Domain.Entities.Deparment.Departments", "Departments")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserRefreshToken.UserRefreshTokens", b =>
                {
                    b.HasOne("Domain.Entities.User.Users", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Ward.Wards", b =>
                {
                    b.HasOne("Domain.Entities.District.Districts", "Districts")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Entities.Cultivar.Cultivars", b =>
                {
                    b.Navigation("Trees");
                });

            modelBuilder.Entity("Domain.Entities.Deparment.Departments", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.District.Districts", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("Domain.Entities.ResidentialGroup.ResidentialGroups", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Domain.Entities.Role.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Street.Streets", b =>
                {
                    b.Navigation("Trees");
                });

            modelBuilder.Entity("Domain.Entities.StreetType.StreetTypes", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Domain.Entities.TreeType.TreeTypes", b =>
                {
                    b.Navigation("Cultivars");
                });

            modelBuilder.Entity("Domain.Entities.User.Users", b =>
                {
                    b.Navigation("UserRefreshTokens");
                });

            modelBuilder.Entity("Domain.Entities.Ward.Wards", b =>
                {
                    b.Navigation("ResidentialGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
